!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
BLUE	defs.h	73;"	d
BUILDING_H	building.h	2;"	d
B_NONE	tile.h	12;"	d
Building	building.h	/^        Building(Game& game, ID id, std::string lua_filename): _game(&game), _id(id), _lua_filename(lua_filename) {$/;"	f	class:Building
Building	building.h	/^class Building {$/;"	c
BuildingArray	game.h	/^        typedef std::vector<Building *> BuildingArray;$/;"	t	class:Game
CLIENT_H	client.h	2;"	d
CPP	Makefile	/^CPP = g++$/;"	m
Client	client.h	/^        Client(Game& game) {$/;"	f	class:Client
Client	client.h	/^class Client {$/;"	c
DEFS_H	defs.h	12;"	d
DEMO3D_H	demo.h	2;"	d
FIXED2INT	fixed.h	9;"	d
FIXED_H	fixed.h	2;"	d
GAME_H	game.h	2;"	d
GREEN	defs.h	74;"	d
GROUND	tile.h	10;"	d
Game	game.cpp	/^Game::Game(): _map(0), _players(10), _buildings(100), _projectiles(100) {$/;"	f	class:Game
Game	game.h	/^class Game {$/;"	c
ID	building.h	/^        typedef unsigned int ID;$/;"	t	class:Building
ID	player.h	/^        typedef unsigned int ID;$/;"	t	class:Player
ID	projectile.h	/^        typedef unsigned int ID;$/;"	t	class:Projectile
INT2FIXED	fixed.h	8;"	d
MAPVIEW_H	map_view.h	2;"	d
MAP_H	map.h	2;"	d
Map	map.cpp	/^Map::Map(Game& game, std::string lua_filename): _game(game), _lua_filename(lua_filename), _w(0), _h(0) {$/;"	f	class:Map
Map	map.h	/^        Map(const Map& map):_game(map._game) {$/;"	f	class:Map
Map	map.h	/^class Map {$/;"	c
map_view	map_view.cpp	/^map_view::map_view(Map& map): _map(map), _scroll_x(0), _scroll_y(0) {$/;"	f	class:map_view
map_view	map_view.h	/^class map_view {$/;"	c
OBJS	Makefile	/^OBJS = game.o main.o map_view.o util.o demo.o video.o map.o tile.o$/;"	m
PLAYER_H	player.h	2;"	d
POINT_H	point.h	2;"	d
PROJECTILE_H	projectile.h	2;"	d
Player	player.h	/^        Player(Game& game, ID id): _game(&game), _id(id) {$/;"	f	class:Player
Player	player.h	/^class Player {$/;"	c
PlayerArray	game.h	/^        typedef std::vector<Player *> PlayerArray;$/;"	t	class:Game
Point	point.h	/^        Point(int x, int y): _x(x), _y(y) {$/;"	f	class:Point
Point	point.h	/^class Point {$/;"	c
Projectile	projectile.h	/^        Projectile(Game& game, ID id, Player::ID owner, std::string lua_filename): _game(&game), _lua_filename(lua_filename), _energy_cost(1) {$/;"	f	class:Projectile
Projectile	projectile.h	/^class Projectile {$/;"	c
ProjectileArray	game.h	/^        typedef std::vector<Projectile *> ProjectileArray;$/;"	t	class:Game
RED	defs.h	75;"	d
RGB15	defs.h	69;"	d
RGB5	defs.h	70;"	d
RGB8	defs.h	71;"	d
SCREEN_HEIGHT	defs.h	29;"	d
SCREEN_HEIGHT	main.cpp	13;"	d	file:
SCREEN_WIDTH	defs.h	30;"	d
SCREEN_WIDTH	main.cpp	12;"	d	file:
TILE_H	tile.h	2;"	d
Tile	tile.cpp	/^Tile::Tile(Map& map): _map(map), _height(GROUND), _resources(false), _building(B_NONE) {$/;"	f	class:Tile
Tile	tile.h	/^class Tile {$/;"	c
TileArray	map.h	/^        typedef std::vector<Tile *> TileArray;$/;"	t	class:Map
UTIL_H	util.h	2;"	d
V3D	v3d.h	/^        V3D(): x(0.0f), y(0.0f), z(0.0f) {$/;"	f	class:V3D
V3D	v3d.h	/^class V3D {$/;"	c
V3D_H	v3d.h	2;"	d
VIDEO_H	video.h	2;"	d
Video	video.h	/^class Video {$/;"	c
_building	tile.h	/^        unsigned int _building; \/\/! which building is on this tile$/;"	m	class:Tile
_buildings	game.h	/^        BuildingArray _buildings;$/;"	m	class:Game
_energy_cost	projectile.h	/^        unsigned int _energy_cost;$/;"	m	class:Projectile
_game	building.h	/^        Game *_game;$/;"	m	class:Building
_game	client.h	/^        Game *_game;$/;"	m	class:Client
_game	map.h	/^        Game& _game;$/;"	m	class:Map
_game	player.h	/^        Game *_game;$/;"	m	class:Player
_game	projectile.h	/^        Game *_game;$/;"	m	class:Projectile
_h	map.h	/^        unsigned int _h; \/\/ height in tiles$/;"	m	class:Map
_height	tile.h	/^        unsigned int _height; \/\/! determines the texture to use (?) is this feature creep? (gak)$/;"	m	class:Tile
_hp_remaining	building.h	/^        unsigned int _hp_remaining;$/;"	m	class:Building
_hp_total	building.h	/^        unsigned int _hp_total;$/;"	m	class:Building
_id	building.h	/^        ID _id;$/;"	m	class:Building
_id	player.h	/^        ID _id;$/;"	m	class:Player
_id	projectile.h	/^        ID _id;$/;"	m	class:Projectile
_lua_filename	building.h	/^        std::string _lua_filename;$/;"	m	class:Building
_lua_filename	map.h	/^        std::string _lua_filename;$/;"	m	class:Map
_lua_filename	projectile.h	/^        std::string _lua_filename;$/;"	m	class:Projectile
_map	game.h	/^        Map *_map; \/\/ pointer because it may be unloaded$/;"	m	class:Game
_map	map_view.h	/^        Map& _map;$/;"	m	class:map_view
_map	tile.h	/^        Map& _map;$/;"	m	class:Tile
_owner	projectile.h	/^        Player::ID _owner;$/;"	m	class:Projectile
_player	building.h	/^        unsigned int _player;$/;"	m	class:Building
_players	game.h	/^        PlayerArray _players;$/;"	m	class:Game
_pos	building.h	/^        V3D _pos;$/;"	m	class:Building
_pos	projectile.h	/^        V3D _pos;$/;"	m	class:Projectile
_projectiles	game.h	/^        ProjectileArray _projectiles;$/;"	m	class:Game
_resources	tile.h	/^        bool _resources; \/\/! whether this tile has resources$/;"	m	class:Tile
_scroll_x	map_view.h	/^        float _scroll_x;$/;"	m	class:map_view
_scroll_y	map_view.h	/^        float _scroll_y;$/;"	m	class:map_view
_source	projectile.h	/^        Building::ID _source;$/;"	m	class:Projectile
_tiles	map.h	/^        TileArray _tiles;$/;"	m	class:Map
_vel	projectile.h	/^        V3D _vel;$/;"	m	class:Projectile
_w	map.h	/^        unsigned int _w; \/\/ width in tiles$/;"	m	class:Map
_x	point.h	/^        int _x;$/;"	m	class:Point
_y	point.h	/^        int _y;$/;"	m	class:Point
blue	demo.cpp	/^GLfloat blue[] = { 0.0, 0.0, 1.0, 1.0 };$/;"	v
blue	main.cpp	/^static GLfloat blue[] = { 0.0, 0.0, 1.0, 1.0 };$/;"	v	file:
building	game.cpp	/^Building *Game::building(Building::ID id) { return 0; }$/;"	f	class:Game
create_building	game.cpp	/^void Game::create_building(std::string type) {} \/\/ TODO: position, player owner$/;"	f	class:Game
create_projectile	game.cpp	/^void Game::create_projectile(std::string type) {} \/\/ TODO: position, angle, power, player owner$/;"	f	class:Game
delete_object	util.h	/^struct delete_object {$/;"	s
demo3d	demo.cpp	/^void demo3d(void) {$/;"	f
demo3d_display	demo.cpp	/^void demo3d_display(void) {$/;"	f
demo3d_init	demo.cpp	/^static void demo3d_init(void) {$/;"	f	file:
demo3d_move	demo.cpp	/^static void demo3d_move() {$/;"	f	file:
demo3d_rotate	demo.cpp	/^static float demo3d_rotate = 0.0f;$/;"	v	file:
draw	map_view.cpp	/^void map_view::draw(unsigned int dticks) {$/;"	f	class:map_view
draw_axes	demo.cpp	/^void draw_axes(void){$/;"	f
draw_axes	main.cpp	/^static void draw_axes(void){$/;"	f	file:
draw_cube	demo.cpp	/^void draw_cube(void){$/;"	f
end_frame	defs.h	/^void end_frame(void) {$/;"	f
error	main.cpp	/^void error(void) {$/;"	f
f32	defs.h	/^typedef float f32;$/;"	t
fatal_error	main.cpp	/^static std::string fatal_error;$/;"	v	file:
fixed	fixed.h	/^typedef u16 fixed; \/\/ or whateva$/;"	t
floattof32	defs.h	/^inline f32 floattof32(float x) { return x; }$/;"	f
floattov10	defs.h	/^inline v10 floattov10(float x) { return x; }$/;"	f
floattov16	defs.h	/^inline v16 floattov16(float x) { return x; }$/;"	f
game_loop	main.cpp	/^void game_loop(Game& game) {$/;"	f
game_mode	main.cpp	/^} game_mode;$/;"	t	typeref:enum:__anon1	file:
generate_map	game.cpp	/^void Game::generate_map() {$/;"	f	class:Game
glFlushNDS	defs.h	/^inline void glFlushNDS(u32 mode) { glFlush(); }$/;"	f
glFlushNDS	defs.h	/^inline void glFlushNDS(uint32 mode) { glFlush(mode); }$/;"	f
glLight	defs.h	/^inline void glLight(int id, rgb color, v10 x, v10 y, v10 z) {$/;"	f
glMaterialf	defs.h	/^inline void glMaterialf(GLenum pname, rgb color) { float params[4]; glMaterialfv(GL_FRONT, pname, unpackRGB(color, params)); }$/;"	f
glNormal3v10	defs.h	/^inline void glNormal3v10(v10 x, v10 y, v10 z) { glNormal(NORMAL_PACK(x, y, z)); }$/;"	f
glNormal3v10	defs.h	/^inline void glNormal3v10(v10 x, v10 y, v10 z) { glNormal3f(x, y, z); }$/;"	f
glOrthof32	defs.h	/^inline void glOrthof32(f32 left, f32 right, f32 bottom, f32 top, f32 znear, f32 zfar) { glOrtho(left, right, bottom, top, znear, zfar); }$/;"	f
glPopMatrix	defs.h	/^inline void glPopMatrix(int32 n){ for(int32 i = 0; i != n; ++i){ glPopMatrix(); } }$/;"	f
glRotatef32i	defs.h	/^inline void glRotatef32i(f32 angle, int32 x, int32 y, int32 z) { glRotatef(angle, x, y, z); }$/;"	f
glTranslate3f32	defs.h	/^inline void glTranslate3f32(f32 x, f32 y, f32 z) { glTranslatef(x, y, z); }$/;"	f
glVertex3v16	defs.h	/^inline void glVertex3v16(v16 x, v16 y, v16 z) { glVertex3f(x, y, z); }$/;"	f
gluLookAtf32	defs.h	/^inline void gluLookAtf32(f32 eyex, f32 eyey, f32 eyez, f32 lookatx, f32 lookaty, f32 lookatz, f32 upx, f32 upy, f32 upz) { gluLookAt(eyex, eyey, eyez, lookatx, lookaty, lookatz, upx, upy, upz); }$/;"	f
green	demo.cpp	/^GLfloat green[] = { 0.0, 1.0, 0.0, 1.0 };$/;"	v
green	main.cpp	/^static GLfloat green[] = { 0.0, 1.0, 0.0, 1.0 };$/;"	v	file:
h	map.h	/^        unsigned int h() const {$/;"	f	class:Map
height	tile.h	/^        unsigned int height() const {$/;"	f	class:Tile
id	player.h	/^        ID id() const { return _id; }$/;"	f	class:Player
init	video.cpp	/^int Video::init(int width, int height, int bpp, bool fullscreen) {$/;"	f	class:Video
init_screen	main.cpp	/^void init_screen(int *argc, char **argv) {$/;"	f
int16	defs.h	/^typedef short int16;$/;"	t
int32	defs.h	/^typedef int int32;$/;"	t
int8	defs.h	/^typedef char int8;$/;"	t
inttof32	defs.h	/^inline f32 inttof32(int x) { return (f32)x; }$/;"	f
inttov10	defs.h	/^inline v10 inttov10(int x) { return (v10)x; }$/;"	f
inttov16	defs.h	/^inline v16 inttov16(int x) { return (v16)x; }$/;"	f
load_game_loop	main.cpp	/^void load_game_loop(Game& game) {$/;"	f
load_map	game.cpp	/^void Game::load_map(std::string name) {}$/;"	f	class:Game
log	util.cpp	/^void log(const char *text) {$/;"	f
logf	util.cpp	/^void logf(char *format, ...) {$/;"	f
logo_loop	main.cpp	/^void logo_loop(void) {$/;"	f
luaopen_moonbase	luaglue.h	/^LUALIB_API int luaopen_moonbase (lua_State* tolua_S)$/;"	f
main	main.cpp	/^int main(int argc, char **argv) {$/;"	f
makefractal	map.cpp	/^void makefractal(Map& map, int xstep, int ystep) {$/;"	f
map	game.cpp	/^Map *Game::map() { return _map; }$/;"	f	class:Game
menu_loop	main.cpp	/^void menu_loop(void) {$/;"	f
mode_after_game	main.cpp	/^    mode_after_game, \/\/< Post game screen,  scoreboard$/;"	e	enum:__anon1	file:
mode_fatal_error	main.cpp	/^    mode_fatal_error, \/\/< Unrecoverable error$/;"	e	enum:__anon1	file:
mode_game	main.cpp	/^    mode_game, \/\/< Game screen$/;"	e	enum:__anon1	file:
mode_game_loading	main.cpp	/^    mode_game_loading, \/\/< Game loading\/waiting screen$/;"	e	enum:__anon1	file:
mode_lobby	main.cpp	/^    mode_lobby, \/\/< Game lobby$/;"	e	enum:__anon1	file:
mode_logo	main.cpp	/^    mode_logo, \/\/< Startup developer logo$/;"	e	enum:__anon1	file:
mode_menu	main.cpp	/^    mode_menu, \/\/< Main game menu$/;"	e	enum:__anon1	file:
mode_normal_exit	main.cpp	/^    mode_normal_exit, \/\/< Normal exit$/;"	e	enum:__anon1	file:
next_game_mode	main.cpp	/^static unsigned char next_game_mode;$/;"	v	file:
operator ()	util.h	/^  void operator()(T *ptr) { $/;"	f	struct:delete_object
operator +	point.h	/^        Point operator+(const Point& p) const {$/;"	f	class:Point
operator -	point.h	/^        Point operator-(const Point& p) const {$/;"	f	class:Point
projectile	game.cpp	/^Projectile *Game::projectile(Projectile::ID id) { return 0; }$/;"	f	class:Game
red	demo.cpp	/^GLfloat red[] = { 1.0, 0.0, 0.0, 1.0 };$/;"	v
red	main.cpp	/^static GLfloat red[] = { 1.0, 0.0, 0.0, 1.0 };$/;"	v	file:
rgb	defs.h	/^typedef unsigned short rgb; \/*!< \\brief Holds a color value. 1bit alpha, 5bits red, 5bits green, 5bits blue. *\/$/;"	t
s32	defs.h	/^typedef signed long s32;$/;"	t
scroll	map_view.cpp	/^void map_view::scroll(float dx, float dy) {$/;"	f	class:map_view
seconds	util.h	/^typedef float seconds;$/;"	t
set_fatal_error	main.cpp	/^void set_fatal_error(std::string err) {$/;"	f
set_height	tile.h	/^        void set_height(unsigned int value) {$/;"	f	class:Tile
set_next_game_mode	main.cpp	/^void set_next_game_mode(game_mode mode) {$/;"	f
start_frame	defs.h	/^void start_frame(void) {$/;"	f
think	game.cpp	/^void Game::think(unsigned int dticks) {$/;"	f	class:Game
tile	map.h	/^        Tile *tile(unsigned int x, unsigned int y){$/;"	f	class:Map
tolua_moonbase_open	luaglue.h	/^TOLUA_API int tolua_moonbase_open (lua_State* tolua_S)$/;"	f
tolua_reg_types	luaglue.h	/^static void tolua_reg_types (lua_State* tolua_S)$/;"	f
u32	defs.h	/^typedef unsigned int u32;$/;"	t
u32	defs.h	41;"	d
u8	defs.h	/^typedef unsigned char u8;$/;"	t
u8	defs.h	37;"	d
unpackRGB	defs.h	/^inline float *unpackRGB(rgb col, float params[4]) { $/;"	f
v10	defs.h	/^typedef float v10;$/;"	t
v16	defs.h	/^typedef float v16;$/;"	t
v16	defs.h	33;"	d
video	main.cpp	/^static Video *video = NULL;$/;"	v	file:
w	map.h	/^        unsigned int w() const {$/;"	f	class:Map
white	demo.cpp	/^GLfloat white[] = { 1.0, 1.0, 1.0, 1.0 };$/;"	v
white	main.cpp	/^static GLfloat white[] = { 1.0, 1.0, 1.0, 1.0 };$/;"	v	file:
x	point.h	/^        int x() const { return _x; }$/;"	f	class:Point
x	v3d.h	/^        float x, y, z;$/;"	m	class:V3D
y	point.h	/^        int y() const { return _y; }$/;"	f	class:Point
y	v3d.h	/^        float x, y, z;$/;"	m	class:V3D
z	v3d.h	/^        float x, y, z;$/;"	m	class:V3D
~Game	game.cpp	/^Game::~Game() {$/;"	f	class:Game
~Map	map.h	/^        virtual ~Map() {$/;"	f	class:Map
